---
source: crates/codegen/src/syntax/ast_nodes.rs
expression: "&formatted"
---
Package = Statement*;

Statement = Include | Use | AssignmentStatement | NamedFunctionDefinition | NamedModuleDefinition | ModuleInstantiation | IfStatement;

Include = 'include' 'file';

Use = 'use' 'file';

AssignmentStatement = Assignment ';';

NamedFunctionDefinition = 'function' 'ident' '(' params:Parameters? ')' '=' body:Expr ';';

NamedModuleDefinition = 'module' 'ident' '(' params:Parameters? ')' '{' body:Statement* '}';

ModuleInstantiation = 'ident' '(' args:Arguments? ')' Child;

IfStatement = 'if' '(' Expr ')' Actions ('else' Actions)?;

Expr = Atom | ListExpr | RangeExpr | UnaryExpr | TernaryExpr | ParenExpr | ListComprehensionExpr | BinExpr;

Actions = Action | BracedActions;

Action = AssignmentStatement | ModuleInstantiation | IfStatement;

BracedActions = '{' Action* '}';

Assignment = name:'ident' '=' value:Expr;

Expressions = Expr (',' Expr)*;

Atom = LiteralExpr | LookupExpr | IndexExpr | FunctionCall;

ListExpr = '[' Expressions ']';

RangeExpr = RangeExprFromTo | RangeExprFromToStep;

UnaryExpr = ('!' | '+' | '-') Expr;

TernaryExpr = Expr '?' Expr ':' Expr;

ParenExpr = '(' Expr ')';

ListComprehensionExpr = '[' ForClause ']';

BinExpr = Expr (BinOp Expr)*;

LiteralExpr = 'true' | 'false' | 'undef' | 'integer' | 'float' | 'string';

LookupExpr = 'ident' ('.' 'ident')*;

IndexExpr = Expr '[' Expr ']';

FunctionCall = 'ident' '(' args:Arguments? ')';

ForClause = 'for' '(' assignments:Assignments ')' ListComprehensionElementOrExpr;

BinOp = '+' | '-' | '*' | '/' | '%' | '^' | '>=' | '>' | '==' | '!=' | '<=' | '<' | '&&' | '||';

RangeExprFromTo = '[' Expr ':' Expr ']';

RangeExprFromToStep = '[' Expr ':' Expr ':' Expr ']';

ListComprehensionElement = LetClause | ForClause | IfClause;

LetClause = 'let' '(' assignments:AssignmentsOpt ')' ListComprehensionElementOrExpr;

IfClause = 'if' '(' condition:Expr ')' ListComprehensionElementOrExpr;

ListComprehensionElementOrExpr = ListComprehensionElement | Expr;

AssignmentsOpt = Assignments?;

Assignments = Assignment (',' Assignment)*;

Parameters = Parameter (',' Parameter)*;

Arguments = Argument (',' Argument)*;

Child = ';' | BracedChildren | ModuleInstantiation;

Children = Child*;

BracedChildren = '{' Children '}';

Parameter = variable:'ident' | Assignment;

Argument = Expr | Assignment;

