---
source: crates/syntax/src/grammar/expressions.rs
description: "expr(\n            [\n                for (a = [steps, -1, 0]) if (b) let (c = d) [a, f]\n            ]\n        )"
---
Node(
    LIST_COMPREHENSION_EXPR@0..39
      L_BRACKET@0..1 "["
      FOR_CLAUSE@1..38
        FOR_KW@1..4 "for"
        L_PAREN@4..5 "("
        ASSIGNMENTS@5..19
          ASSIGNMENT@5..19
            IDENT@5..6 "a"
            EQUALS@6..7 "="
            LIST_EXPR@7..19
              L_BRACKET@7..8 "["
              EXPRESSIONS@8..18
                LOOKUP_EXPR@8..13
                  IDENT@8..13 "steps"
                COMMA@13..14 ","
                UNARY_EXPR@14..16
                  MINUS@14..15 "-"
                  INTEGER@15..16
                    INTEGER@15..16 "1"
                COMMA@16..17 ","
                INTEGER@17..18
                  INTEGER@17..18 "0"
              R_BRACKET@18..19 "]"
        R_PAREN@19..20 ")"
        IF_CLAUSE@20..38
          IF_KW@20..22 "if"
          L_PAREN@22..23 "("
          LOOKUP_EXPR@23..24
            IDENT@23..24 "b"
          R_PAREN@24..25 ")"
          LET_CLAUSE@25..38
            LET_KW@25..28 "let"
            L_PAREN@28..29 "("
            ASSIGNMENTS@29..32
              ASSIGNMENT@29..32
                IDENT@29..30 "c"
                EQUALS@30..31 "="
                LOOKUP_EXPR@31..32
                  IDENT@31..32 "d"
            R_PAREN@32..33 ")"
            LIST_EXPR@33..38
              L_BRACKET@33..34 "["
              EXPRESSIONS@34..37
                LOOKUP_EXPR@34..35
                  IDENT@34..35 "a"
                COMMA@35..36 ","
                LOOKUP_EXPR@36..37
                  IDENT@36..37 "f"
              R_BRACKET@37..38 "]"
      R_BRACKET@38..39 "]"
    ,
)
