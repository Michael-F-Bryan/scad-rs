---
source: crates/syntax/src/generated/mod.rs
expression: "scad_codegen::pretty_print(generated).unwrap()"
---
pub enum SyntaxKind {
    IDENT,
    ERROR,
    WHITESPACE,
    COMMENT,
    INTEGER_LIT,
    FLOAT_LIT,
    #[doc = "The `!` symbol."]
    BANG,
    #[doc = "The `%` symbol."]
    PERCENT,
    #[doc = "The `&&` symbol."]
    AND,
    #[doc = "The `(` symbol."]
    L_PAREN,
    #[doc = "The `)` symbol."]
    R_PAREN,
    #[doc = "The `*` symbol."]
    STAR,
    #[doc = "The `+` symbol."]
    PLUS,
    #[doc = "The `,` symbol."]
    COMMA,
    #[doc = "The `-` symbol."]
    MINUS,
    #[doc = "The `/` symbol."]
    SLASH,
    #[doc = "The `:` symbol."]
    COLON,
    #[doc = "The `;` symbol."]
    SEMICOLON,
    #[doc = "The `<` symbol."]
    LESS_THAN,
    #[doc = "The `<=` symbol."]
    LESS_THAN_EQUALS,
    #[doc = "The `=` symbol."]
    EQUALS,
    #[doc = "The `>` symbol."]
    GREATER_THAN,
    #[doc = "The `>=` symbol."]
    GREATER_THAN_EQUALS,
    #[doc = "The `?` symbol."]
    QUESTION_MARK,
    #[doc = "The `[` symbol."]
    L_BRACE,
    #[doc = "The `]` symbol."]
    R_BRACE,
    #[doc = "The `{` symbol."]
    L_CURLY,
    #[doc = "The `||` symbol."]
    OR,
    #[doc = "The `}` symbol."]
    R_CURLY,
}
impl SyntaxKind {
    pub const fn is_punctuation(self) -> bool {
        match self {
            SyntaxKind::BANG
            | SyntaxKind::PERCENT
            | SyntaxKind::AND
            | SyntaxKind::L_PAREN
            | SyntaxKind::R_PAREN
            | SyntaxKind::STAR
            | SyntaxKind::PLUS
            | SyntaxKind::COMMA
            | SyntaxKind::MINUS
            | SyntaxKind::SLASH
            | SyntaxKind::COLON
            | SyntaxKind::SEMICOLON
            | SyntaxKind::LESS_THAN
            | SyntaxKind::LESS_THAN_EQUALS
            | SyntaxKind::EQUALS
            | SyntaxKind::GREATER_THAN
            | SyntaxKind::GREATER_THAN_EQUALS
            | SyntaxKind::QUESTION_MARK
            | SyntaxKind::L_BRACE
            | SyntaxKind::R_BRACE
            | SyntaxKind::L_CURLY
            | SyntaxKind::OR
            | SyntaxKind::R_CURLY => true,
            _ => false,
        }
    }
    pub const fn is_keyword(self) -> bool {
        match self {
            SyntaxKind::BANG
            | SyntaxKind::PERCENT
            | SyntaxKind::AND
            | SyntaxKind::L_PAREN
            | SyntaxKind::R_PAREN
            | SyntaxKind::STAR
            | SyntaxKind::PLUS
            | SyntaxKind::COMMA
            | SyntaxKind::MINUS
            | SyntaxKind::SLASH
            | SyntaxKind::COLON
            | SyntaxKind::SEMICOLON
            | SyntaxKind::LESS_THAN
            | SyntaxKind::LESS_THAN_EQUALS
            | SyntaxKind::EQUALS
            | SyntaxKind::GREATER_THAN
            | SyntaxKind::GREATER_THAN_EQUALS
            | SyntaxKind::QUESTION_MARK
            | SyntaxKind::L_BRACE
            | SyntaxKind::R_BRACE
            | SyntaxKind::L_CURLY
            | SyntaxKind::OR
            | SyntaxKind::R_CURLY => true,
            _ => false,
        }
    }
    pub const fn from_symbol(symbol: &str) -> Option<SyntaxKind> {
        match symbol {
            ";" => Some(SyntaxKind::SEMICOLON),
            ":" => Some(SyntaxKind::COLON),
            "," => Some(SyntaxKind::COMMA),
            "." => Some(SyntaxKind::DOT),
            "?" => Some(SyntaxKind::QUESTION_MARK),
            "(" => Some(SyntaxKind::L_PAREN),
            "{" => Some(SyntaxKind::L_CURLY),
            "[" => Some(SyntaxKind::L_BRACE),
            ")" => Some(SyntaxKind::R_PAREN),
            "}" => Some(SyntaxKind::R_CURLY),
            "]" => Some(SyntaxKind::R_BRACE),
            "!" => Some(SyntaxKind::BANG),
            "+" => Some(SyntaxKind::PLUS),
            "-" => Some(SyntaxKind::MINUS),
            "*" => Some(SyntaxKind::STAR),
            "/" => Some(SyntaxKind::SLASH),
            "^" => Some(SyntaxKind::CARET),
            "%" => Some(SyntaxKind::PERCENT),
            "&&" => Some(SyntaxKind::AND),
            "||" => Some(SyntaxKind::OR),
            "<" => Some(SyntaxKind::LESS_THAN),
            "<=" => Some(SyntaxKind::LESS_THAN_EQUALS),
            ">" => Some(SyntaxKind::GREATER_THAN),
            ">=" => Some(SyntaxKind::GREATER_THAN_EQUALS),
            "=" => Some(SyntaxKind::EQUALS),
            _ => None,
        }
    }
}

