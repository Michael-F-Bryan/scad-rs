
Package = Statement*

Statement =
  Include
| Use
| AssignmentStatement
| NamedFunctionDefinition
| NamedModuleDefinition
| ModuleInstantiation

Include = 'include' 'file'

Use = 'use' 'file'

AssignmentStatement = Assignment ';'

Expressions = Expr (',' Expr)*

Expr =
  Atom
| ListExpression
| RangeExpression
| UnaryExpr
| TernaryExpr
| ParenExpr
| ListComprehensionExpr
| LetClause
| BinExpr

Atom =
  LiteralExpr
| LookupExpr
| IndexExpr
| FunctionCall

LiteralExpr = 'true' | 'false' | 'undef' | 'integer' | 'float' | 'string'

LookupExpr = 'ident' ('.' 'ident')*

TernaryExpr = Expr '?' Expr ':' Expr

IndexExpr = Expr '[' Expr ']'

ParenExpr = '(' Expr ')'

ListComprehensionExpr = '(' ListComprehensionElements ')'

BinExpr = Expr BinOp Expr

BinOp = '+' | '-' | '*' | '/' | '%' | '^' | '>=' | '>' | '=' | '<=' | '<' | '&&' | '||'

UnaryExpr = ('!' | '+' | '-') Expr

RangeExpression = RangeExpressionFromTo | RangeExpressionFromToStep

RangeExpressionFromTo = '[' Expr ':' Expr ']'

RangeExpressionFromToStep = '[' Expr ':' Expr ':' Expr ']'

ListExpression = '[' Expressions ']'

ListComprehensionElements =
  LetClause
| ForClause
| IfClause

ListComprehensionElementsOrExpr = ListComprehensionElements | Expr

LetClause = 'let' '(' assignments:AssignmentsOpt ')' ListComprehensionElements Expr

ForClause = 'for' '(' assignments:Assignments ')' ListComprehensionElementsOrExpr

IfClause = 'if' '(' condition:Expr ')' ListComprehensionElementsOrExpr

NamedFunctionDefinition = 'function' 'ident' '(' params:Parameters? ')' '=' body:Expr ';'

NamedModuleDefinition = 'module' 'ident' '(' params:Parameters? ')' body:Statement

FunctionCall = 'ident' '(' args:Arguments? ')'

ModuleInstantiation = 'ident' '(' args:Arguments? ')' Child

Children = Child*

Child =
  ';'
| BracedChildren
| ModuleInstantiation

BracedChildren = '{' Children '}'

Parameters = Parameter (',' Parameter)*

Parameter = variable:'ident' | Assignment

Arguments = Argument (',' Argument)*

Argument = Expr | Assignment

AssignmentsOpt = Assignments?

Assignments = Assignment (',' Assignment)*

Assignment = name:'ident' '=' value:Expr
