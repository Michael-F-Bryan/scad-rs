// Grammar for the OpenSCAD programming language.
//
// For information on how this file is used, see the original article from
// rust-analyzer:
//
// https://rust-analyzer.github.io/blog/2020/10/24/introducing-ungrammar.html

Package = Statement*

Statement =
  Include
| Use
| AssignmentStatement
| NamedFunctionDefinition
| NamedModuleDefinition
| ModuleInstantiation
| IfStatement

Include = 'include' 'file'

Use = 'use' 'file'

IfStatement = 'if' '(' Expr ')' Actions ( 'else' Actions )?

Actions =
  Action
| BracedActions

BracedActions = '{' Action* '}'

Action =
  AssignmentStatement
| ModuleInstantiation
| IfStatement

AssignmentStatement = Assignment ';'

Expressions = Expr (',' Expr)*

Expr =
  Atom
| ListExpr
| RangeExpr
| UnaryExpr
| TernaryExpr
| ParenExpr
| ListComprehensionExpr
| BinExpr

Atom =
  LiteralExpr
| LookupExpr
| IndexExpr
| FunctionCall

LiteralExpr = 'true' | 'false' | 'undef' | 'integer' | 'float' | 'string'

LookupExpr = 'ident' ('.' 'ident')*

TernaryExpr = Expr '?' Expr ':' Expr

IndexExpr = Expr '[' Expr ']'

ParenExpr = '(' Expr ')'

ListComprehensionExpr = '[' ForClause ']'

BinExpr = Expr (BinOp Expr)*

BinOp = '+' | '-' | '*' | '/' | '%' | '^' | '>=' | '>' | '==' | '!=' | '<=' | '<' | '&&' | '||'

UnaryExpr = ('!' | '+' | '-') Expr

RangeExpr= RangeExprFromTo | RangeExprFromToStep

RangeExprFromTo = '[' Expr ':' Expr ']'

RangeExprFromToStep = '[' Expr ':' Expr ':' Expr ']'

ListExpr = '[' Expressions ']'

ListComprehensionElement =
  LetClause
| ForClause
| IfClause

ListComprehensionElementOrExpr = ListComprehensionElement | Expr

LetClause = 'let' '(' assignments:AssignmentsOpt ')' ListComprehensionElementOrExpr

ForClause = 'for' '(' assignments:Assignments ')' ListComprehensionElementOrExpr

IfClause = 'if' '(' condition:Expr ')' ListComprehensionElementOrExpr

NamedFunctionDefinition = 'function' 'ident' '(' params:Parameters? ')' '=' body:Expr ';'

NamedModuleDefinition = 'module' 'ident' '(' params:Parameters? ')' '{' body:Statement* '}'

FunctionCall = 'ident' '(' args:Arguments? ')'

ModuleInstantiation = 'ident' '(' args:Arguments? ')' Child

Children = Child*

Child =
  ';'
| BracedChildren
| ModuleInstantiation

BracedChildren = '{' Children '}'

Parameters = Parameter (',' Parameter)*

Parameter = variable:'ident' | Assignment

Arguments = Argument (',' Argument)*

Argument = Expr | Assignment

AssignmentsOpt = Assignments?

Assignments = Assignment (',' Assignment)*

Assignment = name:'ident' '=' value:Expr
